-- -------------------------------------------------------------------
-- @2020, Odysseus Data Services, Inc. All rights reserved
-- MIMIC IV CDM Conversion
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
-- dependency, run after:
--      st_core.sql
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
-- A draft to apply Wave Forms

-- (Manlik) Regardless of what format we end up with - is to take the meta data and map them into:

-- Procedure
-- [SNOMED.4141651] Continuous ECG monitoring
-- date/time is offset from start of monitor (1/1/1990 if no actual time is given)
-- procedure_source_value = "<wfdb reference ID - ex 3700002_0011>"

-- Device_exposure
-- [SNOMED.45758393] Patient monitoring system module, electrocardiographic
-- device_exposure_start_datetime is the date/time is offset from start of monitor (1/1/1990 if no actual time is given)
-- device_exposure_end_datetime is the start + total duration of the monitor data
-- device_source_value = "<wfdb reference ID - ex 3700002_0011>" 

-- Measurement - heart rate (1 to N), original WFDB reported or generated by our ETL
-- [SNOMED.4239408] Heart rate - units [SNOMED.4118124] bpm
-- date/time is offset from start of monitor (1/1/1990 if no actual time is given)
-- measurement_source_value = "<wfdb reference ID>.<algorithm ID> - ex "3700002_0011.WFDB" or "3700002_0011.CCSIMxv1"

-- Measurement - P-QRS-T derived measurements - aVF R-wave example
-- [LOINC.3022916] R wave amplitude in lead AVF
-- date/time is offset from start of monitor (1/1/1990 if no actual time is given) + segment offset
-- measurement_source_value = "<wfdb reference ID>.<algorithm ID> - ex 3700002_0011.CCSIMxv1"

-- I have ECG measurement map down to lead level

-- The same approach would apply to BP and Respiratory values. 

-- If we derive observations like AFib and Tachycardia - we can further map these to the condition_occurrence table as [4064452] ECG: atrial fibrillation using the same reference time and source
--
-- parsed codes targeted to clinical findings, target cdm table - cdm_condition_occurrence
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
-- open points:
--      parse XML to create src_* or raw_* tables
--
-- POC source table:
/*
 bq --location=US load --replace --source_format=CSV  --allow_quoted_newlines=True --skip_leading_rows=1 --autodetect waveform_source_poc.raw_case055_ecg_lines3 z_more/raw_case055_ecg_lines3.csv
*/
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
-- staging tables
-- -------------------------------------------------------------------

-- -------------------------------------------------------------------
-- src_waveform_header
-- -------------------------------------------------------------------

CREATE OR REPLACE TABLE @etl_project.@etl_dataset.src_waveform_header
(       
    reference_id            STRING,
    raw_files_path          STRING,
    -- smth to connect to visit_detail -- source_visit_detail ()
    -- visit_detail will be at the heart of applying waveform
    -- parsed data, "header"  
    subject_id              INT64,
    hadm_id                 INT64,
    start_datetime          DATETIME,
    end_datetime            DATETIME,
    --
    load_table_id           STRING,
    load_row_id             INT64,
    trace_id                STRING
);

-- -------------------------------------------------------------------
-- src_waveform_header
-- -------------------------------------------------------------------

CREATE OR REPLACE TABLE @etl_project.@etl_dataset.src_waveform_dx
(       
    reference_id            STRING,  -- FK to the header
    waveform_id             STRING,  -- row number inside the reference_id
    -- parsed data, "body": pivoted, unpivoted? -- extract 
    source_code             STRING,      -- for example:

        -- "GLOBAL T AXIS" -- map these codes according to P100CMapToOMOP and other possible mappings
                           -- populate measurement_concept_id with the found concepts
    qualifier       STRING,
    severity        STRING,
                                -- ...
    --
    load_table_id           STRING,
    load_row_id             INT64,
    trace_id                STRING
);

-- parsed codes to be targeted to table cdm_measurement

CREATE OR REPLACE TABLE @etl_project.@etl_dataset.src_waveform_mx
(
    subject_id              INT64,
    reference_id            STRING,  -- FK to the header
    waveform_id             STRING,  -- row number inside the reference_id 
                                     -- (to concat with reference_id like stay_id)
    -- parsed data, "body": pivoted, unpivoted? -- extract from xml
    mx_datetime             DATETIME,
    source_code             STRING,      -- for example:
        -- "GLOBAL HEART RATE"
        -- "GLOBAL P AXIS"
        -- "GLOBAL PR INT"
        -- "GLOBAL QRS AXIS"
        -- "GLOBAL QRS DUR"
        -- "GLOBAL QT"
        -- "GLOBAL QTc"
        -- "GLOBAL T AXIS" -- map these codes according to P100CMapToOMOP and other possible mappings
                           -- populate measurement_concept_id with the found concepts
    value_as_number         FLOAT64,
    unit_source_value       STRING, -- measurement unit "BPM", "MS", "UV" (microvolt) etc.
                                    -- map these labels and populate unit_concept_id
    --
    load_table_id           STRING,
    load_row_id             INT64,
    trace_id                STRING
);


-- parse xml from Manlik? -> src_waveform
-- src_waveform -> visit_detail (visit_detail_source_value = <reference ID>)

-- finding the visit 
-- create visit_detail
-- create measurement -> link visit_detail using visit_detail_source_value = meas_source_value 
-- (start with Manlik's proposal)


-- select random existing subject_id and hadm_id

CREATE OR REPLACE TABLE @etl_project.@etl_dataset.src_waveform_subject AS
SELECT
    subject_id,
    hadm_id
FROM
    @etl_project.@etl_dataset.src_admissions
LIMIT 1
;

-- -------------------------------------------------------------------
-- insert sample data
-- -------------------------------------------------------------------


INSERT INTO @etl_project.@etl_dataset.src_waveform_header
SELECT
    '3700002_0011.CCSIMxv1' AS reference_id,
    'gs://waveform_storage/3700002/0011.wfdb' AS raw_files_path,
    subj.subject_id AS subject_id,
    subj.hadm_id AS hadm_id,
    PARSE_DATETIME('%F', '1990-01-01') AS start_datetime,
    DATETIME_ADD(PARSE_DATETIME('%F', '1990-01-01'), INTERVAL src.row_count + 1 MILLISECOND) AS end_datetime,
    --
    '3700002_0011.CCSIMxv1.xml'                                 AS load_table_id,
    0                                                           AS load_row_id,
    '{"reference_id":"3700002_0011","algorithm_id":"CCSIMxv1"}' AS trace_id
FROM
(
    SELECT COUNT(*) AS row_count 
    FROM @wf_project.@wf_dataset.raw_case055_ecg_lines3
) src
CROSS JOIN
    @etl_project.@etl_dataset.src_waveform_subject subj
;

-- line_1
INSERT INTO @etl_project.@etl_dataset.src_waveform_mx
-- line_1
SELECT
    subj.subject_id AS subject_id,
    '3700002_0011.CCSIMxv1' AS reference_id,  -- FK to the header
    CONCAT('3700002_0011.CCSIMxv1', '.', CAST(src.row_id AS STRING)) AS waveform_id,  -- row number inside the reference_id
    DATETIME_ADD(PARSE_DATETIME('%F', '1990-01-01'), INTERVAL src.row_id MILLISECOND) AS mx_datetime,
    "GLOBAL QT"             AS source_code,      -- for example:
    src.line_1                  AS value_as_number,
    'UV' AS unit_source_value, -- measurement unit "BPM", "MS", "UV" (microvolt) etc.
                                    -- map these labels and populate unit_concept_id
    --
    '3700002_0011.CCSIMxv1.xml' load_table_id,
    0 AS load_row_id,
    TO_JSON_STRING(STRUCT(
            '3700002_0011' AS reference_id,
            'CCSIMxv1' AS algorithm_id,
            src.row_id AS row_id
        )) AS trace_id -- 
FROM
    @wf_project.@wf_dataset.raw_case055_ecg_lines3 src
CROSS JOIN
    @etl_project.@etl_dataset.src_waveform_subject subj
UNION ALL
-- line_2
SELECT
    subj.subject_id AS subject_id,
    '3700002_0011.CCSIMxv1' AS reference_id,  -- FK to the header
    CONCAT('3700002_0011.CCSIMxv1', '.', CAST(src.row_id AS STRING)) AS waveform_id,  -- row number inside the reference_id
    DATETIME_ADD(PARSE_DATETIME('%F', '1990-01-01'), INTERVAL src.row_id MILLISECOND) AS mx_datetime,
    "GLOBAL QRS DUR"             AS source_code,      -- for example:
    src.line_2                  AS value_as_number,
    'UV' AS unit_source_value, -- measurement unit "BPM", "MS", "UV" (microvolt) etc.
                                    -- map these labels and populate unit_concept_id
    --
    '3700002_0011.CCSIMxv1.xml' load_table_id,
    0 AS load_row_id,
    TO_JSON_STRING(STRUCT(
            '3700002_0011' AS reference_id,
            'CCSIMxv1' AS algorithm_id,
            src.row_id AS row_id
        )) AS trace_id -- 
FROM
    @wf_project.@wf_dataset.raw_case055_ecg_lines3 src
CROSS JOIN
    @etl_project.@etl_dataset.src_waveform_subject subj
UNION ALL
-- line_3
SELECT
    subj.subject_id AS subject_id,
    '3700002_0011.CCSIMxv1' AS reference_id,  -- FK to the header
    CONCAT('3700002_0011.CCSIMxv1', '.', CAST(src.row_id AS STRING)) AS waveform_id,  -- row number inside the reference_id
    DATETIME_ADD(PARSE_DATETIME('%F', '1990-01-01'), INTERVAL src.row_id MILLISECOND) AS mx_datetime,
    "GLOBAL QRS AXIS"             AS source_code,      -- for example:
    src.line_3                  AS value_as_number,
    'UV' AS unit_source_value, -- measurement unit "BPM", "MS", "UV" (microvolt) etc.
                                    -- map these labels and populate unit_concept_id
    --
    '3700002_0011.CCSIMxv1.xml' load_table_id,
    0 AS load_row_id,
    TO_JSON_STRING(STRUCT(
            '3700002_0011' AS reference_id,
            'CCSIMxv1' AS algorithm_id,
            src.row_id AS row_id
        )) AS trace_id -- 
FROM
    @wf_project.@wf_dataset.raw_case055_ecg_lines3 src
CROSS JOIN
    @etl_project.@etl_dataset.src_waveform_subject subj
;
